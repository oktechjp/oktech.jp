# Code Quality Rules

## Comments
- Don't add unnecessary comments
- Code should be self-documenting through clear naming
- Only add comments for complex algorithms or non-obvious business logic
- Remove TODO comments after implementing the feature

## Code Examples

### Good ✓
```typescript
// Calculate compound interest using the formula: A = P(1 + r/n)^(nt)
function calculateCompoundInterest(
  principal: number,
  rate: number,
  time: number,
  frequency: number
): number {
  return principal * Math.pow(1 + rate / frequency, frequency * time);
}
```

### Bad ✗
```typescript
// This is a function that adds two numbers
function add(a: number, b: number): number {
  // Return the sum
  return a + b; // Adding a and b
}
```

## Code Cleanliness
- Remove console.log statements before completing work
- No commented-out code blocks
- Fix all linting warnings and errors
- Ensure consistent formatting

## Error Handling
- Handle errors appropriately
- Don't suppress TypeScript errors with @ts-ignore
- Provide meaningful error messages
- Use try-catch blocks where appropriate

## Performance Considerations
- Avoid unnecessary re-renders in React
- Use appropriate Astro component hydration directives
- Optimize imports and bundle size
- Follow established patterns for data fetching