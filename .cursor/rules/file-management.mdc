# File Management Rules

## Core Principle
Always prefer editing existing files over creating new ones. Never proactively create documentation files (*.md) unless explicitly requested.

## File Operations Priority
1. **First**: Check if the functionality can be added to an existing file
2. **Second**: Look for similar files that could be extended
3. **Last Resort**: Create a new file only when absolutely necessary

## Documentation Files
- Never create README.md, CONTRIBUTING.md, or other docs unless explicitly asked
- Don't create markdown documentation for code you write
- Focus on code implementation, not documentation

## When Creating Files is Acceptable
- New components that don't fit in existing files
- New pages or routes
- Clearly separated concerns (e.g., new utility functions)
- When explicitly instructed by the user

## File Organization
- Follow existing directory structure
- Check neighboring files for naming patterns
- Maintain consistency with existing file organization

## Examples

### Good Decision ✓
```
User: "Add a user profile component"
Action: First check if there's an existing User or Profile component to extend
```

### Bad Decision ✗
```
User: "Add a helper function"
Action: Creating a new utils.ts when there's already a helpers.ts file
```

## Code Style Consistency
- Follow existing patterns and check neighboring files for style/structure
- Match indentation, naming conventions, and code organization
- Don't introduce new patterns without explicit need