# React Component Patterns Rule

## Core Principle
For React components, use the `export default function ComponentName` pattern, not named exports.

## Implementation Pattern

### Good ✓
```tsx
// Button.tsx
interface ButtonProps {
  label: string;
  onClick: () => void;
}

export default function Button({ label, onClick }: ButtonProps) {
  return (
    <button onClick={onClick} class="btn btn-primary">
      {label}
    </button>
  );
}
```

### Bad ✗
```tsx
// Don't use named exports for components
export const Button = ({ label, onClick }: ButtonProps) => {
  return <button>{label}</button>;
};

// Don't use arrow functions for main component
const Button: React.FC<ButtonProps> = (props) => {
  return <button>{props.label}</button>;
};
export default Button;
```

## Additional React Patterns
- Place interfaces/types at the top of the file
- Use TypeScript for all props
- Destructure props in function parameters
- Keep components focused and single-purpose
- Use hooks at the top of the component

## File Naming
- Component files: PascalCase (e.g., UserCard.tsx)
- One component per file
- Place in appropriate directory under components/