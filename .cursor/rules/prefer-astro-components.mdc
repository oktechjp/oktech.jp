# Prefer Astro Components Rule

## Core Principle
Prefer Astro components (.astro) over React components (.tsx) unless client-side interactivity is needed.

## Astro Component Requirements
- Astro templates require opening and closing frontmatter fences (---) with TypeScript code in between
- Import statements go in the frontmatter
- Props interface definition goes in the frontmatter
- Component logic and data fetching go in the frontmatter

## When to Use Astro Components
- Static content presentation
- Server-side data fetching
- SEO-critical content
- Layout components
- Pages
- Components that don't need client-side state

## When to Use React Components
- Interactive forms
- Real-time updates
- Client-side state management
- Dynamic UI elements (dropdowns, modals with state)
- Components using hooks like useState, useEffect

## Examples

### Good Astro Component ✓
```astro
---
// UserCard.astro
interface Props {
  name: string;
  email: string;
}

const { name, email } = Astro.props;
---

<div class="card">
  <h3>{name}</h3>
  <p>{email}</p>
</div>
```

### When React is Appropriate ✓
```tsx
// InteractiveForm.tsx
export default function InteractiveForm() {
  const [formData, setFormData] = useState({});
  
  // Client-side interactivity needed
  return <form>...</form>;
}
```

## Integration Pattern
```astro
---
// Page.astro
import InteractiveForm from "@/components/InteractiveForm";
---

<div>
  <h1>Static content in Astro</h1>
  <InteractiveForm client:load />
</div>
```