name: Build Astro, Test, Deploy

on:
  push:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    environment: github-pages
    env:
      BUILD_PATH: ${{ vars.BUILD_PATH || '.' }}
      SITE_URL: ${{ vars.SITE_URL }}
      BASE_PATH: ${{ vars.BASE_PATH }}
      CACHE_KEY: ${{ vars.CACHE_KEY || 'v1' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Detect package manager
        id: detect-package-manager
        run: |
          if [ -f "${{ github.workspace }}/${{ env.BUILD_PATH }}/yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            echo "runner=yarn" >> $GITHUB_OUTPUT
            echo "lockfile=yarn.lock" >> $GITHUB_OUTPUT
          elif [ -f "${{ github.workspace }}/${{ env.BUILD_PATH }}/package-lock.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
            echo "runner=npx --no-install" >> $GITHUB_OUTPUT
            echo "lockfile=package-lock.json" >> $GITHUB_OUTPUT
          else
            echo "Unable to determine package manager" >&2
            exit 1
          fi

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: ${{ steps.detect-package-manager.outputs.manager }}
          cache-dependency-path: ${{ env.BUILD_PATH }}/${{ steps.detect-package-manager.outputs.lockfile }}

      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v5

      # Cache node_modules to avoid reinstalling (shared with import workflow)
      - name: Restore node_modules cache
        id: node-modules-cache
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.BUILD_PATH }}/node_modules
            ~/.cache/puppeteer
            ~/.cache/ms-playwright
          key: ${{ runner.os }}-node-modules-${{ hashFiles(format('{0}/package-lock.json', env.BUILD_PATH)) }}
          restore-keys: |
            ${{ runner.os }}-node-modules-

      - name: Install dependencies
        if: steps.node-modules-cache.outputs.cache-hit != 'true'
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}
        working-directory: ${{ env.BUILD_PATH }}

      # ===== Astro image/asset cache (default: node_modules/.astro) =====
      # Restore the newest cache in the family (keyed by inputs),
      # even if the exact key doesn't exist yet.
      - name: Restore Astro cache
        id: astro-cache
        uses: actions/cache/restore@v4
        with:
          path: ${{ env.BUILD_PATH }}/node_modules/.astro
          key: ${{ runner.os }}-astro-cache-${{ env.CACHE_KEY }}-${{ hashFiles('**/astro.config.*','**/package-lock.json','**/pnpm-lock.yaml','**/yarn.lock','public/**/*.{png,jpg,jpeg,webp,avif,gif,svg}','src/assets/**/*.{png,jpg,jpeg,webp,avif,gif,svg}','content/**/*.{png,jpg,jpeg,webp,avif,gif,svg}') }}
          restore-keys: |
            ${{ runner.os }}-astro-cache-${{ env.CACHE_KEY }}-

      - name: Print env
        run: |
          echo "vars.SITE_URL='${{ vars.SITE_URL }}'"
          echo "env SITE_URL='$SITE_URL'"
          echo "env BASE_PATH='$BASE_PATH'"

      - name: Build with Astro
        run: ${{ steps.detect-package-manager.outputs.runner }} astro build
        working-directory: ${{ env.BUILD_PATH }}
        env:
          SITE_URL: ${{ vars.SITE_URL }}
          BASE_PATH: ${{ vars.BASE_PATH }}

      # Install Playwright browsers if not cached
      - name: Install Playwright browsers
        if: steps.node-modules-cache.outputs.cache-hit != 'true'
        run: npx playwright install --with-deps
        working-directory: ${{ env.BUILD_PATH }}

      - name: Run tests
        run: npm run test:dist
        working-directory: ${{ env.BUILD_PATH }}

      # Save node_modules cache if it wasn't cached
      - name: Save node_modules cache
        if: steps.node-modules-cache.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: |
            ${{ env.BUILD_PATH }}/node_modules
            ~/.cache/puppeteer
            ~/.cache/ms-playwright
          key: ${{ runner.os }}-node-modules-${{ hashFiles(format('{0}/package-lock.json', env.BUILD_PATH)) }}

      # IMPORTANT: Always save Astro cache so new variants produced this run are kept.
      # Append run_id to avoid "already exists", and rely on the restore prefix above to pick the newest next time.
      - name: Save Astro cache (always)
        uses: actions/cache/save@v4
        with:
          path: ${{ env.BUILD_PATH }}/node_modules/.astro
          key: ${{ runner.os }}-astro-cache-${{ env.CACHE_KEY }}-${{ hashFiles('**/astro.config.*','**/package-lock.json','**/pnpm-lock.yaml','**/yarn.lock','public/**/*.{png,jpg,jpeg,webp,avif,gif,svg}','src/assets/**/*.{png,jpg,jpeg,webp,avif,gif,svg}','content/**/*.{png,jpg,jpeg,webp,avif,gif,svg}') }}-${{ github.run_id }}

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ${{ env.BUILD_PATH }}/dist

  deploy:
    needs: build
    runs-on: ubuntu-latest
    name: Deploy
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
